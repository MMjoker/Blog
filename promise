1.Promise

  有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。

  Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。

      const PENDING = 'pengding';
      const FULFILLED = 'fulfilled';
      const REJECTED = 'rejected';

      class SelPromise {
        // 保存 onFulfilled 回调函数
        onFulfilledCallback = [];
        // 保存 onRejected 回调函数
        onRejectedCallback = [];
        // 储存状态，初始值是 pending
        status = PENDING;
        // 成功之后的值
        value = null;
        // 失败之后的原因
        reason = null;
        
        constructor(executor) {
          // 将 resolve 和 reject 传给 new Promsie 的回调函数
          executor(this.resolve, this.reject) 
        }

        // 箭头函数可以函数里面的 this 始终指向 Promise 实例对象
        resolve = (value) => {
          if (this.status === PENDING) {
            this.status = FULFILLED;
            this.value = value;
            // 执行 onFulfilled 回调函数
            this.onFulfilledCallback.forEach((fn) => fn(value));
          }
        }

        reject = (reason) => {
          // 只有状态是 pending 的情况下，才改变为 rejected 状态
          if (this.status === PENDING) {
            this.status = REJECTED;
            this.reason = reason;
            // 执行 onRejected 回调函数
            this.onRejectedCallback.forEach((fn) => fn(value));
          }
        }

        then(onFulfilled, onRejected) {
          const promise2 = new SelPromise((resolve, reject) => {
            if (this.status === FULFILLED) {
              // 把 resolve 的值传递给 fulfilled 状态的回调函数，并且调用它。
              onFulfilled(this.value);
            } else if (this.status === REJECTED) {
              // 把 reject 的值传递给 rejected 状态的回调函数，并且调用它。
              onRejected(this.reason);
            } else {
              // pending 状态下保存回调函数
              this.onFulfilledCallback.push(onFulfilled);
              this.onRejectedCallback.push(onRejected);
            }
          })
          return promise2;
        }
      }

  这其实是一个观察者模式，then 方法的 this.onFulfilledCallbacks.push(onFulfilled) 和 this.onRejectedCallbacks.push(onRejected) 就是在添加订阅者，而 resolve 和 reject 方法就是在通知所有的订阅者。

2. then 方法的链式调用
    
